import logging
import xml


import netconf


actor SchemaGetter(client, log_handler: logging.Handler):
    """Helper actor for downloading schemas from NETCONF server."""

    var schemas_to_download: list[(identifier: ?str, namespace: ?str, version: ?str, format: ?str)] = []
    var current_download_index = 0
    var on_get_schema_cb: ?action(int, int, (identifier: ?str, namespace: ?str, version: ?str, format: ?str), ?str) -> None = None
    var on_done_cb: ?action(?netconf.NetconfError) -> None = None

    def download(on_get_schema: action(int, int, (identifier: ?str, namespace: ?str, version: ?str, format: ?str), ?str) -> None, on_done: action(?netconf.NetconfError) -> None, identifier_str: str):
        """Download schemas. If identifier_str is 'all', download all schemas."""
        on_get_schema_cb = on_get_schema
        on_done_cb = on_done
        schemas_to_download = []
        current_download_index = 0

        if identifier_str == "all":
            # Get list of all schemas first
            client.list_schemas(_on_list_schemas)
        else:
            # Download single schema
            schemas_to_download.append((identifier=identifier_str, namespace=None, version=None, format="yang"))
            _download_next_schema()

    def _on_list_schemas(c: netconf.Client, schemas: list[(identifier: ?str, namespace: ?str, version: ?str, format: ?str)], error: ?netconf.NetconfError):
        """Handle schema list response"""
        if error is not None:
            # Pass error to completion callback
            if on_done_cb is not None:
                on_done_cb(error)
            return

        # Only download yang format (not yin) to avoid duplicates
        for schema in schemas:
            if schema.identifier is not None and schema.format == "yang":
                schemas_to_download.append(schema)

        _download_next_schema()

    def _download_next_schema():
        """Download the next schema in the queue"""
        if current_download_index >= len(schemas_to_download):
            # All schemas downloaded successfully
            if on_done_cb is not None:
                on_done_cb(None)
        else:
            schema = schemas_to_download[current_download_index]

            schema_identifier = schema.identifier
            if schema_identifier is None:
                # Skip schema with no identifier
                current_download_index += 1
                _download_next_schema()
                return

            ident = schema_identifier if schema_identifier is not None else ""

            # Use "yang" as default format if not specified
            format_str = schema.format if schema.format is not None else "yang"
            client.get_schema(_on_get_schema, ident, schema.version, format_str)

    def _on_get_schema(c: netconf.Client, result: ?xml.Node, error: ?netconf.NetconfError):
        """Handle individual schema response"""
        if current_download_index < len(schemas_to_download):
            schema = schemas_to_download[current_download_index]

            schema_data: ?str = None

            if error is None:
                # Extract schema data
                if result is not None:
                    for child in result.children:
                        if child.tag == "data":
                            schema_data = child.text
                            break

            # Call the callback with current progress and schema data
            if on_get_schema_cb is not None:
                on_get_schema_cb(current_download_index, len(schemas_to_download), schema, schema_data)

        # Move to next schema
        current_download_index += 1
        _download_next_schema()
